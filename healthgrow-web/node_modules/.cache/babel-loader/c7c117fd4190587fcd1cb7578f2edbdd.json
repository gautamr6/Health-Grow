{"ast":null,"code":"var d3 = require(\"d3\"); // set the dimensions and margins of the graph\n\n\nvar margin = {\n  top: 10,\n  right: 30,\n  bottom: 30,\n  left: 60\n},\n    width = 460 - margin.left - margin.right,\n    height = 400 - margin.top - margin.bottom; // append the svg object to the body of the page\n\nvar svg = d3.select(\"#my_dataviz\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); //Read the data\n\nd3.csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered_comma.csv\", // When reading the csv, I must format variables:\nfunction (d) {\n  return {\n    date: d3.timeParse(\"%Y-%m-%d\")(d.date),\n    value: d.value\n  };\n}, // Now I can use this dataset:\nfunction (data) {\n  // Add X axis --> it is a date format\n  var x = d3.scaleTime().domain(d3.extent(data, function (d) {\n    return d.date;\n  })).range([0, width]);\n  svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // Add Y axis\n\n  var y = d3.scaleLinear().domain([0, d3.max(data, function (d) {\n    return +d.value;\n  })]).range([height, 0]);\n  svg.append(\"g\").call(d3.axisLeft(y)); // Add the line\n\n  svg.append(\"path\").datum(data).attr(\"fill\", \"none\").attr(\"stroke\", \"steelblue\").attr(\"stroke-width\", 1.5).attr(\"d\", d3.line().x(function (d) {\n    return x(d.date);\n  }).y(function (d) {\n    return y(d.value);\n  }));\n});","map":{"version":3,"sources":["/Users/ksun/Downloads/350S20-43/healthgrow-web/src/scripts.js"],"names":["d3","require","margin","top","right","bottom","left","width","height","svg","select","append","attr","csv","d","date","timeParse","value","data","x","scaleTime","domain","extent","range","call","axisBottom","y","scaleLinear","max","axisLeft","datum","line"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB,C,CAEA;;;AACA,IAAIC,MAAM,GAAG;AAACC,EAAAA,GAAG,EAAE,EAAN;AAAUC,EAAAA,KAAK,EAAE,EAAjB;AAAqBC,EAAAA,MAAM,EAAE,EAA7B;AAAiCC,EAAAA,IAAI,EAAE;AAAvC,CAAb;AAAA,IACAC,KAAK,GAAG,MAAML,MAAM,CAACI,IAAb,GAAoBJ,MAAM,CAACE,KADnC;AAAA,IAEAI,MAAM,GAAG,MAAMN,MAAM,CAACC,GAAb,GAAmBD,MAAM,CAACG,MAFnC,C,CAIA;;AACA,IAAII,GAAG,GAAGT,EAAE,CAACU,MAAH,CAAU,aAAV,EACTC,MADS,CACF,KADE,EAETC,IAFS,CAEJ,OAFI,EAEKL,KAAK,GAAGL,MAAM,CAACI,IAAf,GAAsBJ,MAAM,CAACE,KAFlC,EAGTQ,IAHS,CAGJ,QAHI,EAGMJ,MAAM,GAAGN,MAAM,CAACC,GAAhB,GAAsBD,MAAM,CAACG,MAHnC,EAITM,MAJS,CAIF,GAJE,EAKTC,IALS,CAKJ,WALI,EAMJ,eAAeV,MAAM,CAACI,IAAtB,GAA6B,GAA7B,GAAmCJ,MAAM,CAACC,GAA1C,GAAgD,GAN5C,CAAV,C,CAQA;;AACAH,EAAE,CAACa,GAAH,CAAO,uGAAP,EAEA;AACA,UAASC,CAAT,EAAW;AACX,SAAO;AAAEC,IAAAA,IAAI,EAAGf,EAAE,CAACgB,SAAH,CAAa,UAAb,EAAyBF,CAAC,CAACC,IAA3B,CAAT;AAA2CE,IAAAA,KAAK,EAAGH,CAAC,CAACG;AAArD,GAAP;AACC,CALD,EAOA;AACA,UAASC,IAAT,EAAe;AAEf;AACA,MAAIC,CAAC,GAAGnB,EAAE,CAACoB,SAAH,GACLC,MADK,CACErB,EAAE,CAACsB,MAAH,CAAUJ,IAAV,EAAgB,UAASJ,CAAT,EAAY;AAAE,WAAOA,CAAC,CAACC,IAAT;AAAgB,GAA9C,CADF,EAELQ,KAFK,CAEC,CAAE,CAAF,EAAKhB,KAAL,CAFD,CAAR;AAGAE,EAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EACGC,IADH,CACQ,WADR,EACqB,iBAAiBJ,MAAjB,GAA0B,GAD/C,EAEGgB,IAFH,CAEQxB,EAAE,CAACyB,UAAH,CAAcN,CAAd,CAFR,EANe,CAUf;;AACA,MAAIO,CAAC,GAAG1B,EAAE,CAAC2B,WAAH,GACLN,MADK,CACE,CAAC,CAAD,EAAIrB,EAAE,CAAC4B,GAAH,CAAOV,IAAP,EAAa,UAASJ,CAAT,EAAY;AAAE,WAAO,CAACA,CAAC,CAACG,KAAV;AAAkB,GAA7C,CAAJ,CADF,EAELM,KAFK,CAEC,CAAEf,MAAF,EAAU,CAAV,CAFD,CAAR;AAGAC,EAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EACGa,IADH,CACQxB,EAAE,CAAC6B,QAAH,CAAYH,CAAZ,CADR,EAde,CAiBf;;AACAjB,EAAAA,GAAG,CAACE,MAAJ,CAAW,MAAX,EACGmB,KADH,CACSZ,IADT,EAEGN,IAFH,CAEQ,MAFR,EAEgB,MAFhB,EAGGA,IAHH,CAGQ,QAHR,EAGkB,WAHlB,EAIGA,IAJH,CAIQ,cAJR,EAIwB,GAJxB,EAKGA,IALH,CAKQ,GALR,EAKaZ,EAAE,CAAC+B,IAAH,GACRZ,CADQ,CACN,UAASL,CAAT,EAAY;AAAE,WAAOK,CAAC,CAACL,CAAC,CAACC,IAAH,CAAR;AAAkB,GAD1B,EAERW,CAFQ,CAEN,UAASZ,CAAT,EAAY;AAAE,WAAOY,CAAC,CAACZ,CAAC,CAACG,KAAH,CAAR;AAAmB,GAF3B,CALb;AAUC,CApCD","sourcesContent":["var d3 = require(\"d3\");\n\n// set the dimensions and margins of the graph\nvar margin = {top: 10, right: 30, bottom: 30, left: 60},\nwidth = 460 - margin.left - margin.right,\nheight = 400 - margin.top - margin.bottom;\n\n// append the svg object to the body of the page\nvar svg = d3.select(\"#my_dataviz\")\n.append(\"svg\")\n.attr(\"width\", width + margin.left + margin.right)\n.attr(\"height\", height + margin.top + margin.bottom)\n.append(\"g\")\n.attr(\"transform\",\n      \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n//Read the data\nd3.csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered_comma.csv\",\n\n// When reading the csv, I must format variables:\nfunction(d){\nreturn { date : d3.timeParse(\"%Y-%m-%d\")(d.date), value : d.value }\n},\n\n// Now I can use this dataset:\nfunction(data) {\n\n// Add X axis --> it is a date format\nvar x = d3.scaleTime()\n  .domain(d3.extent(data, function(d) { return d.date; }))\n  .range([ 0, width ]);\nsvg.append(\"g\")\n  .attr(\"transform\", \"translate(0,\" + height + \")\")\n  .call(d3.axisBottom(x));\n\n// Add Y axis\nvar y = d3.scaleLinear()\n  .domain([0, d3.max(data, function(d) { return +d.value; })])\n  .range([ height, 0 ]);\nsvg.append(\"g\")\n  .call(d3.axisLeft(y));\n\n// Add the line\nsvg.append(\"path\")\n  .datum(data)\n  .attr(\"fill\", \"none\")\n  .attr(\"stroke\", \"steelblue\")\n  .attr(\"stroke-width\", 1.5)\n  .attr(\"d\", d3.line()\n    .x(function(d) { return x(d.date) })\n    .y(function(d) { return y(d.value) })\n    )\n\n})\n"]},"metadata":{},"sourceType":"module"}